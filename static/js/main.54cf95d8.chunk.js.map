{"version":3,"sources":["serviceWorker.js","components/Display/display.styles.js","constants/index.js","utils/isOperator.js","utils/isNumber.js","utils/hasTerminalCalculation.js","logic/inputValueHandler/inputValueHandler.number.js","logic/inputValueHandler/inputValueHandler.operator.js","logic/inputValueHandler/inputValueHandler.backspace.js","utils/closingParWouldBeRedundant.js","utils/unclosedPars.js","logic/inputValueHandler/inputValueHandler.parentheses.js","logic/inputValueHandler/inputValueHandler.negative.js","logic/inputValueHandler/inputValueHandler.decimal.js","logic/equals/doArithmetic.js","logic/equals/trimValue.js","logic/equals/getTerminalCalculation.js","logic/equals/equals.js","contexts/CalcContext.js","logic/inputValueHandler/inputValueHandler.js","components/Display/display.component.jsx","contexts/keypadContext.js","components/InputKey/key-specific.styles.js","components/InputKey/input-key.styles.js","components/InputKey/input-key.component.jsx","components/Keypad/keypad.styles.js","components/Keypad/keypad.component.jsx","components/Calculator/calculator.styles.js","components/Calculator/calculator.component.jsx","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DisplayContainer","styled","div","DIVIDE","String","fromCharCode","MULTIPLY","SUBTRACT","ADD","isOperator","val","includes","isNumber","parsedVal","parseFloat","hasTerminalCalculation","arr","length","Array","isArray","numberHandler","values","inputValue","lastValue","pop","operatorHandler","toString","backspaceHandler","truncatedNumber","slice","precedingValue","closingParWouldBeRedundant","inputArr","precedingOpenParIndex","reverse","indexOf","unclosedPars","reduce","acc","parenthesesHandler","numberOfUnclosedPars","negativeHandler","decimalHandler","operations","mainOperations","add","index","sum","splice","subtract","difference","multiply","product","divide","quotient","multiplyAndDivide","this","addAndSubtract","doArithmetic","forEach","i","trimValue","calculatedValue","toPrecision","trimmedValue","toExponential","getTerminalCalculation","startingIndex","equals","terminalCalculation","indexOfFirstClosePar","indexOfMatchingOpenPar","lastIndexOf","evaluatedBlock","finalCalculatedValue","CalcContext","React","createContext","CalcProvider","children","useState","inputsArray","updateInputs","Provider","value","pushNewInput","incomingInputValue","currentValues","undefined","filter","el","inputValueHandler","displayParser","join","displayOutput","arrForMain","Display","useContext","runCalculation","displayOutputArray","canCalculate","className","negativeLabel","InputKeyFactory","label","type","inputKeys","icon","faArrowLeft","mobileTap","color","css","keyframes","mobileTapKeyframes","clearKeyStyles","utilKeyStyles","fontSizesHash","numKeyStyles","operatorKeyStyles","equalsKeyStyles","KeyOuter","KeyInner","button","clear","util","num","operator","KeyWrapper","props","InputKey","name","onClick","KeypadContainer","KeyPad","KeypadContext","map","data","key","CalculatorContainer","Calculator","App","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.54cf95d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from 'styled-components';\n\nexport const DisplayContainer = styled.div`\n  background-image: url(display-background.jpg);\n  background-size: 100% 100%;\n  height: 35%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding-bottom: 6.5rem;\n\n  .outputs {\n    color: #fff;\n\n    padding-right: 1rem;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n\n    .main {\n      font-size: 5rem;\n      text-align: right;\n    }\n\n    .sub {\n      font-size: 2.5rem;\n      text-align: right;\n    }\n\n    @media only screen and (max-width: 20em) {\n      .main {\n        font-size: 4.5rem;\n      }\n    }\n  }\n\n  @media only screen and (max-width: 23em) {\n    height: 32%;\n  }\n\n  @media screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape) and (hover: none) and (max-height: 40em) {\n    background-image: linear-gradient(to left top, #35aaff 50%, #9ad2fb);\n    padding-bottom: 0.5rem;\n    height: 27%;\n\n    .outputs {\n      .main {\n        font-size: 4rem;\n      }\n    }\n  }\n`;\n","export const DIVIDE = ` ${String.fromCharCode(247)} `;\nexport const MULTIPLY = ` ${String.fromCharCode(215)} `;\nexport const SUBTRACT = ` ${String.fromCharCode(8722)} `;\nexport const ADD = ` ${String.fromCharCode(43)} `;\n\nexport const CLEAR = 'CLEAR';\n\nexport const BACKSPACE = 'BACKSPACE';\nexport const PARENTHESES = 'PARENTHESES';\nexport const NEGATIVE = 'NEGATIVE';\nexport const DECIMAL = 'DECIMAL';\n\nexport const EQUALS = 'EQUALS';\n\nexport const OPENPAR = '(';\nexport const CLOSEPAR = ')';\n","import { DIVIDE, MULTIPLY, SUBTRACT, ADD } from '../constants';\n\nconst isOperator = val => [DIVIDE, MULTIPLY, SUBTRACT, ADD].includes(val);\n\nexport default isOperator;\n","const isNumber = val => {\n  const parsedVal = parseFloat(val);\n\n  // The second bit screens NaN:\n  // eslint-disable-next-line\n  return typeof parsedVal === 'number' && parsedVal === parsedVal;\n};\n\nexport default isNumber;\n","// Returns true if arr is in format [value, sub-array]\nconst hasTerminalCalculation = arr => {\n  return (\n    arr.length === 2 &&\n    !Array.isArray(arr[0]) &&\n    Array.isArray(arr[1]) &&\n    arr[1].length > 0\n  );\n};\n\nexport default hasTerminalCalculation;\n","import { MULTIPLY, OPENPAR, CLOSEPAR } from '../../constants';\n\nimport isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\n\nconst numberHandler = (values, inputValue) => {\n  let lastValue = values.pop() || '';\n\n  // Disallow mutliple initial zeroes\n  if (lastValue === '0') {\n    return [...values, lastValue];\n  }\n\n  if (isNumber(lastValue) || lastValue === '') {\n    // String concatenationn\n    lastValue += inputValue;\n    return [...values, lastValue];\n  }\n\n  // If the current last value is an operator, put incoming number in new index\n  if (isOperator(lastValue)) {\n    return [...values, lastValue, inputValue];\n  }\n\n  switch (lastValue) {\n    case '-':\n      return [...values, lastValue + inputValue];\n    case OPENPAR:\n      return [...values, lastValue, inputValue];\n    case CLOSEPAR:\n      return [...values, lastValue, MULTIPLY, inputValue];\n    default:\n      return [...values, lastValue];\n  }\n};\n\nexport default numberHandler;\n","import { OPENPAR, CLOSEPAR } from '../../constants';\n\nimport isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\n\nconst operatorHandler = (values, inputValue) => {\n  // Disallow initial operators:\n  if (!values.length) {\n    return values;\n  }\n\n  let lastValue = values.pop();\n\n  // Only add incoming operator as new index after numbers\n  // The parseFloat bit gets rid of dangling decimals\n  if (isNumber(lastValue)) {\n    lastValue = parseFloat(lastValue).toString();\n    return [...values, lastValue, inputValue];\n  }\n\n  // Replace dangling operators with incoming operator\n  if (isOperator(lastValue)) {\n    return [...values, inputValue];\n  }\n\n  switch (lastValue) {\n    case OPENPAR:\n    case '-':\n      return [...values, lastValue];\n    case CLOSEPAR:\n      return [...values, lastValue, inputValue];\n    default:\n      return [...values, inputValue];\n  }\n};\n\nexport default operatorHandler;\n","import { MULTIPLY, OPENPAR } from '../../constants';\n\nimport isNumber from '../../utils/isNumber';\n\nconst backspaceHandler = values => {\n  if (!values.length) {\n    return values;\n  }\n\n  let lastValue = values.pop();\n\n  // If number, delete last digit (or whole number if single-digit)\n  if (isNumber(lastValue)) {\n    let truncatedNumber = lastValue.slice(0, -1);\n\n    return truncatedNumber ? [...values, truncatedNumber] : [...values];\n  }\n\n  //Edge case: deletes hidden MULTIPLYs\n  if (lastValue === OPENPAR) {\n    let precedingValue = values.pop();\n    if (!precedingValue) {\n      return [];\n    }\n    return precedingValue === MULTIPLY ? values : [...values, precedingValue];\n  }\n\n  // Default behavior\n  return values;\n};\n\nexport default backspaceHandler;\n","import { OPENPAR } from '../constants';\n\nconst closingParWouldBeRedundant = inputArr => {\n  let arr = [...inputArr];\n\n  // Detect if immediately preceding opening parenthesis is immediately preceded by another opening parenthesis\n  const precedingOpenParIndex = arr.reverse().indexOf(OPENPAR);\n\n  return arr[precedingOpenParIndex + 1] === OPENPAR;\n};\n\nexport default closingParWouldBeRedundant;\n","import { OPENPAR, CLOSEPAR } from '../constants';\n\n// Returns the number of unclosed pars\nconst unclosedPars = arr => {\n  const openParCount = arr.reduce(\n    (acc, val) => (val === OPENPAR ? acc + 1 : acc),\n    0\n  );\n  const closeParCount = arr.reduce(\n    (acc, val) => (val === CLOSEPAR ? acc + 1 : acc),\n    0\n  );\n\n  return openParCount - closeParCount;\n};\n\nexport default unclosedPars;\n","import { MULTIPLY, OPENPAR, CLOSEPAR } from '../../constants';\n\nimport isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\nimport closingParWouldBeRedundant from '../../utils/closingParWouldBeRedundant';\nimport unclosedPars from '../../utils/unclosedPars';\n\nconst parenthesesHandler = values => {\n  // Push an opening parenthesis when array is empty\n  if (!values.length) {\n    return [OPENPAR];\n  }\n\n  const numberOfUnclosedPars = unclosedPars(values);\n\n  // Get the last value\n  let lastValue = values.pop();\n\n  // If last value is a number\n  if (isNumber(lastValue)) {\n    // Get rid of dangling decimals\n    lastValue = parseFloat(lastValue).toString();\n\n    // Multiply and start new block of parentheses if no parentheses are unclosed\n    if (numberOfUnclosedPars === 0) {\n      return [...values, lastValue, MULTIPLY, OPENPAR];\n    }\n\n    // If the current block of parentheses has an operator\n    if (isOperator(values[values.length - 1])) {\n      return [...values, lastValue, CLOSEPAR];\n      // If not, multiply and start a new block of parentheses\n    } else {\n      return [...values, lastValue, MULTIPLY, OPENPAR];\n    }\n  }\n\n  // If the last value is an operator, push an opening parenthesis\n  if (isOperator(lastValue)) {\n    return [...values, lastValue, OPENPAR];\n  }\n\n  switch (lastValue) {\n    case '-':\n      lastValue = '-1';\n      return [...values, lastValue, MULTIPLY, OPENPAR];\n    case OPENPAR:\n      return [...values, lastValue, OPENPAR];\n    case CLOSEPAR:\n      // Push multiply and open pars if no unclosed parentheses OR if closing par would be redundant\n      if (numberOfUnclosedPars === 0 || closingParWouldBeRedundant(values)) {\n        return [...values, lastValue, MULTIPLY, OPENPAR];\n      }\n\n      return [...values, lastValue, CLOSEPAR];\n    default:\n      return [...values, lastValue];\n  }\n};\n\nexport default parenthesesHandler;\n","import { MULTIPLY, OPENPAR, CLOSEPAR } from '../../constants';\n\nimport isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\n\nconst negativeHandler = values => {\n  if (!values.length) {\n    return ['-'];\n  }\n\n  let lastValue = values.pop();\n\n  if (isNumber(lastValue)) {\n    lastValue = lastValue[0] === '-' ? lastValue.slice(1) : '-' + lastValue;\n    return [...values, lastValue];\n  }\n\n  if (isOperator(lastValue)) {\n    return [...values, lastValue, '-'];\n  }\n\n  switch (lastValue) {\n    case '-':\n      return values;\n    case OPENPAR:\n      return [...values, lastValue, '-'];\n    case CLOSEPAR:\n      return [...values, lastValue, MULTIPLY, '-'];\n    default:\n      return [...values, lastValue];\n  }\n};\n\nexport default negativeHandler;\n","import { MULTIPLY, OPENPAR, CLOSEPAR } from '../../constants';\n\nimport isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\n\nconst decimalHandler = values => {\n  if (!values.length) {\n    return ['0.'];\n  }\n\n  let lastValue = values.pop();\n\n  if (isNumber(lastValue)) {\n    return lastValue.includes('.')\n      ? [...values, lastValue]\n      : [...values, lastValue + '.'];\n  }\n\n  if (isOperator(lastValue)) {\n    return [...values, lastValue, '0.'];\n  }\n\n  switch (lastValue) {\n    case '-':\n      return [...values, '-0.'];\n    case OPENPAR:\n      return [...values, lastValue, '0.'];\n    case CLOSEPAR:\n      return [...values, lastValue, MULTIPLY, '0.'];\n    default:\n      return [...values, lastValue];\n  }\n};\n\nexport default decimalHandler;\n","import { MULTIPLY, DIVIDE, ADD, SUBTRACT } from '../../constants';\nimport isOperator from '../../utils/isOperator';\n\nconst operations = {\n  mainOperations: {\n    /*math performed on indices in front of and behind the index.current (operator) index,\n    then clear operator and reagent*/\n    add: function (arr, index) {\n      const sum = parseFloat(arr[index - 1]) + parseFloat(arr[index + 1]);\n      arr[index - 1] = sum.toString();\n      arr.splice(index, 2);\n    },\n\n    subtract: function (arr, index) {\n      const difference = arr[index - 1] - arr[index + 1];\n      arr[index - 1] = difference.toString();\n      arr.splice(index, 2);\n    },\n\n    multiply: function (arr, index) {\n      const product = arr[index - 1] * arr[index + 1];\n      arr[index - 1] = product.toString();\n      arr.splice(index, 2);\n    },\n\n    divide: function (arr, index) {\n      const quotient = arr[index - 1] / arr[index + 1];\n      arr[index - 1] = quotient.toString();\n      arr.splice(index, 2);\n    }\n  },\n\n  multiplyAndDivide: function (arr, index) {\n    if (arr[index] === MULTIPLY) {\n      this.mainOperations.multiply(arr, index);\n    } else if (arr[index] === DIVIDE) {\n      this.mainOperations.divide(arr, index);\n    }\n  },\n\n  addAndSubtract: function (arr, index) {\n    if (arr[index] === SUBTRACT) {\n      this.mainOperations.subtract(arr, index);\n    } else if (arr[index] === ADD) {\n      this.mainOperations.add(arr, index);\n    }\n  }\n};\n\nconst doArithmetic = arr => {\n  // The while loop is necessary because the operation changes the length of the array and messes with the forEach loop\n  while (arr.includes(MULTIPLY) || arr.includes(DIVIDE)) {\n    arr.forEach((val, i) => {\n      if (isOperator(val)) {\n        operations.multiplyAndDivide(arr, i);\n      }\n    });\n  }\n\n  while (arr.includes(ADD) || arr.includes(SUBTRACT)) {\n    arr.forEach((val, i) => {\n      if (isOperator(val)) {\n        operations.addAndSubtract(arr, i);\n      }\n    });\n  }\n\n  return arr;\n};\n\nexport default doArithmetic;\n","const trimValue = val => {\n  // Cut down to 8 significant figures\n  const calculatedValue = parseFloat(val[0]).toPrecision(8).toString();\n\n  // Trim off trailing zeroes\n  let trimmedValue = parseFloat(calculatedValue);\n\n  // Implement exponential notation\n  return trimmedValue >= 1000000000\n    ? trimmedValue.toExponential()\n    : trimmedValue.toString();\n};\n\nexport default trimValue;\n","import isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\nimport { CLOSEPAR } from '../../constants';\nimport unclosedPars from '../../utils/unclosedPars';\n\n// If the user calculates the input, we need to determine the \"terminal\n// calculation\" of that input. Having done so, should the user press '=' again\n// immediately after performing a calculation, the calculator will display the\n// previously calculated value evaluated by this terminal calculation. For\n// example:\n\n// '100 - 2 + 6'   ------> terminal calcuation is '+ 6'\n// '='             ------> output is 104\n// '='             ------> output is 110\n// '='             ------> output is 116\n// etc.\n\nconst getTerminalCalculation = values => {\n  //return early if there are unclosed parentheses or if the values array is too short\n  if (unclosedPars(values) || values.length < 2) {\n    return null;\n  }\n\n  // \"normal\" case with no parentheses involved. The last two indices are returned\n  if (isNumber(values.slice(-1)[0])) {\n    return values.slice(-2);\n\n    //otherwise, if a closing parenthesis is involved:\n  } else if (values.slice(-1)[0] === CLOSEPAR) {\n    // There might be layers of nested parentheses between this closing parenthesis and its\n    // matching opening parenthesis, so we have to get clever\n    let startingIndex = -1;\n    while (unclosedPars(values.slice(startingIndex))) {\n      startingIndex--;\n    }\n\n    // Check that the immediate preceding index is an operator\n    if (isOperator(values.slice(startingIndex - 1)[0])) {\n      return values.slice(startingIndex - 1);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n};\n\nexport default getTerminalCalculation;\n","import { OPENPAR, CLOSEPAR } from '../../constants';\n\nimport doArithmetic from './doArithmetic';\nimport trimValue from './trimValue.js';\nimport isOperator from '../../utils/isOperator';\nimport getTerminalCalculation from './getTerminalCalculation';\nimport unclosedPars from '../../utils/unclosedPars';\n\nconst equals = values => {\n  //return early if there are unclosed parentheses\n  if (unclosedPars(values)) {\n    return values;\n  }\n\n  // Drop dangling operator\n  if (isOperator(...values.slice(-1))) {\n    values = values.slice(0, -1);\n  }\n\n  // Before handling anything else, get terminal calculation. Refer to getTerminalCalculation.test.js for examples\n  const terminalCalculation = getTerminalCalculation(values);\n\n  // If parentheses exist, handle them first\n  while (values.includes(CLOSEPAR)) {\n    // The first closing parenthesis we encounter corresponds to the innnermost layer of parentheses\n    const indexOfFirstClosePar = values.indexOf(CLOSEPAR);\n\n    // That matching opening parenthesis is simply the last opening parenthesis that comes\n    // before that closing parenthesis\n    const indexOfMatchingOpenPar = values\n      .slice(0, indexOfFirstClosePar)\n      .lastIndexOf(OPENPAR);\n\n    // Do whatever arithmetic needs to be done between those parentheses\n    const evaluatedBlock = doArithmetic(\n      values.slice(indexOfMatchingOpenPar + 1, indexOfFirstClosePar)\n    );\n\n    // Replace that parentheses block with that calculated value\n    values = [\n      ...values.slice(0, indexOfMatchingOpenPar),\n      evaluatedBlock,\n      ...values.slice(indexOfFirstClosePar + 1)\n    ];\n  }\n\n  // After parentheses have been handled:\n  const finalCalculatedValue = trimValue(doArithmetic(values));\n\n  // Return both the caluclated value (index 0) and the terminal calculation (index 1)\n  // Refer to getTerminalCalculation.js and its spec file for examples / explanations\n  return terminalCalculation\n    ? [finalCalculatedValue, terminalCalculation]\n    : [finalCalculatedValue];\n};\n\nexport default equals;\n","import React, { useState } from 'react';\n\nimport inputValueHandler from '../logic/inputValueHandler/inputValueHandler';\n\nconst CalcContext = React.createContext();\n\nexport const CalcProvider = ({ children }) => {\n  const [inputsArray, updateInputs] = useState([]);\n\n  const pushNewInput = incomingInputValue =>\n    updateInputs(inputValueHandler([...inputsArray], incomingInputValue));\n\n  return (\n    <CalcContext.Provider value={{ inputsArray, pushNewInput }}>\n      {children}\n    </CalcContext.Provider>\n  );\n};\n\nexport default CalcContext;\n","import {\n  CLEAR,\n  BACKSPACE,\n  PARENTHESES,\n  DECIMAL,\n  NEGATIVE,\n  EQUALS\n} from '../../constants';\n\nimport isOperator from '../../utils/isOperator';\nimport isNumber from '../../utils/isNumber';\nimport hasTerminalCalculation from '../../utils/hasTerminalCalculation';\n\nimport numberHandler from './inputValueHandler.number';\nimport operatorHandler from './inputValueHandler.operator';\nimport backspaceHandler from './inputValueHandler.backspace';\nimport parenthesesHandler from './inputValueHandler.parentheses';\nimport negativeHandler from './inputValueHandler.negative';\nimport decimalHandler from './inputValueHandler.decimal';\nimport equals from '../equals/equals';\n\nexport default (currentValues, inputValue) => {\n  if (inputValue === undefined) {\n    console.error('ERR: No input value specified');\n  }\n\n  // Handle equals\n  if (inputValue === EQUALS) {\n    // Check for terminal calculation\n    if (hasTerminalCalculation(currentValues)) {\n      currentValues = [currentValues[0], ...currentValues[1]];\n    }\n\n    return equals(currentValues);\n  }\n\n  // If user starts new calculation, remove the current terminal calculation (an array) if there is one\n  let values = currentValues.filter(el => !Array.isArray(el));\n\n  // Handle numbers\n  if (isNumber(inputValue)) {\n    return numberHandler(values, inputValue);\n  }\n\n  // Handle opeators\n  if (isOperator(inputValue)) {\n    return operatorHandler(values, inputValue);\n  }\n\n  // Handle everything else\n  switch (inputValue) {\n    case CLEAR:\n      return [];\n    case BACKSPACE:\n      return backspaceHandler(values);\n    case PARENTHESES:\n      return parenthesesHandler(values);\n    case NEGATIVE:\n      return negativeHandler(values);\n    case DECIMAL:\n      return decimalHandler(values);\n    default:\n      return [...values, inputValue];\n  }\n};\n","import React, { useContext, useState } from 'react';\n\nimport { DisplayContainer } from './display.styles';\nimport CalcContext from '../../contexts/CalcContext';\n\nimport { OPENPAR, MULTIPLY } from '../../constants';\n\nimport hasTerminalCalculation from '../../utils/hasTerminalCalculation';\nimport equals from '../../logic/equals/equals';\nimport unclosedPars from '../../utils/unclosedPars';\nimport isOperator from '../../utils/isOperator';\n\n// The equals function returns an array with two elements: the calculated value and the terminal calculation.\n// We only want to display the calculated value, i.e index 0.\n// Also, we hide multiplication signs that precede opening parentheses, i.e. \"8 x (\" becomes \"8(\"\nconst displayParser = arr => {\n  return arr\n    .filter(el => !Array.isArray(el))\n    .filter((el, i, arr) => !(el === MULTIPLY && arr[i + 1] === OPENPAR))\n    .join('');\n};\n\n// If there is no terminal calculation (i.e. the user has not hit enter recently), display all user input:\nconst displayUserInput = arr => {\n  if (!hasTerminalCalculation(arr) && arr.length > 1) {\n    return displayParser(arr);\n  }\n\n  return '';\n};\n\nconst displayOutput = arr => {\n  // If the user has just hit equals, return early and just display the calculated value\n  if (hasTerminalCalculation(arr) || arr.length <= 1) {\n    return displayParser(arr);\n  }\n\n  // Truncate incoming array by 1 element\n  const arrForMain = arr.slice(0, -1);\n\n  // Calculate that value and display it\n  return displayParser(equals(arrForMain));\n};\n\n// Thus, return a boolean denoting if the current values array is calculable:\nconst canCalculate = arr => {\n  if (!arr.length) {\n    return true;\n  }\n\n  // If the user has just hit equals or just begun a calculation, return early and just display the calculated value\n  if (hasTerminalCalculation(arr) || arr.length === 1) {\n    return true;\n  }\n\n  // Before the user hits equals, the we continually runs calculations one step behind the user\n  // Reason being: if these calculations ran in step with user input, the equals button would be highly redundant\n  // Therefore, we truncate the incoming array by one index\n  const displayOutputArray = arr.slice(0, -1);\n\n  // We don't want to run a calculation if there are unclosed parentheses, or if the current last value is a dangling operator\n  return (\n    displayOutputArray.length &&\n    !unclosedPars(displayOutputArray) &&\n    !isOperator(displayOutputArray.slice(-1))\n  );\n};\n\nconst Display = () => {\n  const { inputsArray } = useContext(CalcContext);\n  const [calculatedValue, runCalculation] = useState('');\n\n  if (\n    canCalculate(inputsArray) &&\n    displayOutput(inputsArray) !== calculatedValue\n  ) {\n    runCalculation(displayOutput(inputsArray));\n  }\n\n  return (\n    <DisplayContainer>\n      <div className='outputs'>\n        <div className='sub'>{displayUserInput(inputsArray)}</div>\n        <div className='main'>{calculatedValue}</div>\n      </div>\n    </DisplayContainer>\n  );\n};\n\nexport default Display;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  DIVIDE,\n  MULTIPLY,\n  SUBTRACT,\n  ADD,\n  CLEAR,\n  BACKSPACE,\n  PARENTHESES,\n  NEGATIVE,\n  DECIMAL,\n  EQUALS\n} from '../constants';\n\n// Prepare array of input key data for iteration within component\nconst negativeLabel = (\n  <div>\n    <strong>{String.fromCharCode(43)}</strong>\n    {'/'}\n    <strong>{String.fromCharCode(8722)}</strong>\n  </div>\n);\n\nfunction InputKeyFactory(value, label, type) {\n  this.value = value;\n  this.label = label;\n  this.type = type;\n}\n\nconst inputKeys = [\n  new InputKeyFactory(CLEAR, 'C', 'clear'),\n  new InputKeyFactory(\n    BACKSPACE,\n    <FontAwesomeIcon icon={faArrowLeft} />,\n    'util'\n  ),\n  new InputKeyFactory(PARENTHESES, '( )', 'util'),\n  new InputKeyFactory(DIVIDE, DIVIDE, 'operator'),\n  new InputKeyFactory('7', '7', 'num'),\n  new InputKeyFactory('8', '8', 'num'),\n  new InputKeyFactory('9', '9', 'num'),\n  new InputKeyFactory(MULTIPLY, MULTIPLY, 'operator'),\n  new InputKeyFactory('4', '4', 'num'),\n  new InputKeyFactory('5', '5', 'num'),\n  new InputKeyFactory('6', '6', 'num'),\n  new InputKeyFactory(SUBTRACT, SUBTRACT, 'operator'),\n  new InputKeyFactory('1', '1', 'num'),\n  new InputKeyFactory('2', '2', 'num'),\n  new InputKeyFactory('3', '3', 'num'),\n  new InputKeyFactory(ADD, ADD, 'operator'),\n  new InputKeyFactory(NEGATIVE, negativeLabel, 'util'),\n  new InputKeyFactory('0', '0', 'num'),\n  new InputKeyFactory(DECIMAL, '.', 'util'),\n  new InputKeyFactory(EQUALS, '=', 'equals')\n];\n\nexport default React.createContext(inputKeys);\n","import { css, keyframes } from \"styled-components\";\n\nimport {\n  BACKSPACE,\n  PARENTHESES,\n  DECIMAL,\n  NEGATIVE,\n  CLEAR,\n  DIVIDE,\n  MULTIPLY,\n  SUBTRACT,\n  ADD,\n  EQUALS\n} from \"../../constants\";\n\nconst clearColor = \"#ff3545\";\nconst clearFocus = \"#ff7882\";\nconst utilColor = \"#727272\";\nconst utilFocus = \"#a1a1a1\";\nconst numColor = \"#6fa7c6\";\nconst numFocus = \"#9dcae3\";\nconst operatorColor = \"#ff8a35\";\nconst operatorFocus = \"#ffa869\";\nconst equalsColor = \"#35aaff\";\nconst equalsFocus = \"#68befc\";\nconst equalsHover = \"#006097\";\n\n// Render styles conditionally for each type of input key\n\nconst mobileTapKeyframes = color => {\n  return keyframes`\n    from {\n      background-color: ${color};\n      color: '#fff';\n    }\n\n    to {\n      color: ${color};\n      background-color: #fff;\n    }\n  `;\n};\n\nconst mobileTap = color => {\n  return css`\n    &:hover,\n    &:active {\n      animation-name: ${mobileTapKeyframes(color)};\n      animation-duration: 1s;\n      animation-fill-mode: forwards;\n      animation-delay: 0.5s;\n    }\n  `;\n};\n\nexport const clearKeyStyles = css`\n  font-size: 5rem;\n  color: ${clearColor};\n  background-color: rgba(255, 255, 255, 0);\n\n  &:hover {\n    background-color: ${clearColor};\n    color: #fff;\n  }\n\n  &:focus {\n    outline: none;\n    color: ${clearFocus};\n\n    &:hover {\n      color: #fff;\n    }\n  }\n\n  @media screen and (hover: none) {\n    ${mobileTap(clearColor)}\n  }\n`;\n\nexport const utilKeyStyles = value => {\n  const fontSizesHash = {\n    [DECIMAL]: \"5rem\",\n    [NEGATIVE]: \"3rem\",\n    [PARENTHESES]: \"4rem\",\n    [BACKSPACE]: \"3.5rem\"\n  };\n\n  const styles = css`\n    font-size: ${fontSizesHash[value]};\n    color: ${utilColor};\n    background-color: rgba(255, 255, 255, 0);\n\n    &:hover {\n      background-color: ${utilColor};\n      color: #fff;\n    }\n\n    &:focus {\n      outline: none;\n      color: ${utilFocus};\n\n      &:hover {\n        color: #fff;\n      }\n    }\n\n    @media screen and (hover: none) {\n      ${mobileTap(utilColor)}\n    }\n  `;\n\n  return styles;\n};\n\nexport const numKeyStyles = css`\n  font-size: 5rem;\n  color: ${numColor};\n  background-color: rgba(255, 255, 255, 0);\n\n  &:hover {\n    background-color: ${numColor};\n    color: white;\n  }\n\n  &:focus {\n    outline: none;\n    color: ${numFocus};\n\n    &:hover {\n      color: #fff;\n    }\n  }\n\n  @media screen and (hover: none) {\n    ${mobileTap(numColor)}\n  }\n`;\n\nexport const operatorKeyStyles = css`\n  font-size: 5rem;\n  color: ${operatorColor};\n  background-color: rgba(255, 255, 255, 0);\n\n  &:hover {\n    background-color: ${operatorColor};\n    color: #fff;\n  }\n\n  &:focus {\n    outline: none;\n    color: ${operatorFocus};\n\n    &:hover {\n      color: #fff;\n    }\n  }\n\n  @media screen and (hover: none) {\n    ${mobileTap(operatorColor)}\n  }\n`;\n\nexport const equalsKeyStyles = css`\n  font-size: 5rem;\n  color: white;\n  background-color: ${equalsColor};\n\n  &:hover {\n    color: white;\n    background-color: ${equalsHover};\n  }\n\n  &:focus {\n    outline: none;\n    background-color: ${equalsFocus};\n\n    &:hover {\n      background-color: ${equalsHover};\n    }\n  }\n\n  @media screen and (hover: none) {\n    &:hover {\n      color: white;\n      background-color: ${equalsColor};\n    }\n  }\n`;\n\nexport const mobileLandscapeOrder = ({ value }) => {\n  switch (value) {\n    case CLEAR:\n      return 0;\n    case DIVIDE:\n      return 1;\n    case MULTIPLY:\n      return 2;\n    case SUBTRACT:\n      return 3;\n    case ADD:\n      return 4;\n    case \"6\":\n      return 5;\n    case \"7\":\n      return 6;\n    case \"8\":\n      return 7;\n    case \"9\":\n      return 8;\n    case PARENTHESES:\n      return 9;\n    case \"2\":\n      return 10;\n    case \"3\":\n      return 11;\n    case \"4\":\n      return 12;\n    case \"5\":\n      return 13;\n    case DECIMAL:\n      return 14;\n    case BACKSPACE:\n      return 15;\n    case \"0\":\n      return 16;\n    case \"1\":\n      return 17;\n    case NEGATIVE:\n      return 18;\n    case EQUALS:\n      return 19;\n    default:\n      return 20;\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  clearKeyStyles,\n  utilKeyStyles,\n  numKeyStyles,\n  operatorKeyStyles,\n  equalsKeyStyles,\n  mobileLandscapeOrder\n} from \"./key-specific.styles\";\n\nconst getKeyStyles = ({ type, value }) => {\n  const keyStylesHash = {\n    clear: clearKeyStyles,\n    util: utilKeyStyles(value),\n    num: numKeyStyles,\n    operator: operatorKeyStyles,\n    equals: equalsKeyStyles\n  };\n\n  return keyStylesHash[type] || \"\";\n};\n\n// General button styles\n// All this work to get some circles:\n\nexport const KeyOuter = styled.div`\n  width: 100%;\n  padding-top: 100%;\n  position: relative;\n\n  // Mobile landscape mode\n  @media screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape) and (hover: none) and (max-height: 40em) {\n    padding-top: 5rem;\n  }\n`;\n\nexport const KeyInner = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  border: 0;\n  width: 100%;\n  height: 100%;\n  font: inherit;\n  border-radius: 50%;\n  -webkit-transform: scale(1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: center;\n  user-select: none;\n  -moz-user-select: none;\n  cursor pointer;\n\n  ${getKeyStyles}\n\n  @media screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape) and (hover: none) and (max-height: 40em) {\n    border-radius: 1rem;\n  }\n`;\n\nexport const KeyWrapper = styled.div`\n  min-width: 21%;\n\n  // Mobile landscape mode\n  @media screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape) and (hover: none) and (max-height: 40em) {\n    order: ${mobileLandscapeOrder};\n    min-width: 17%;\n  }\n`;\n\nexport default ({ children, ...props }) => {\n  return (\n    <KeyWrapper {...props}>\n      <KeyOuter>\n        <KeyInner {...props}>{children}</KeyInner>\n      </KeyOuter>\n    </KeyWrapper>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport KeyContainer from './input-key.styles.js';\nimport CalcContext from '../../contexts/CalcContext';\n\nconst InputKey = ({ label, type, value }) => {\n  const { pushNewInput } = useContext(CalcContext);\n\n  return (\n    <KeyContainer\n      type={type}\n      name={label}\n      label={label}\n      value={value}\n      onClick={() => pushNewInput(value)}\n    >\n      {label}\n    </KeyContainer>\n  );\n};\n\nexport default InputKey;\n","import styled from 'styled-components';\n\nexport const KeypadContainer = styled.div`\n  height: 65%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n\n  align-items: center;\n  align-content: space-around;\n\n  @media only screen and (max-width: 23em) {\n    height: 68%;\n  }\n\n  @media screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape) and (hover: none) and (max-height: 40em) {\n    height: 73%;\n  }\n`;\n","import React, { useContext } from 'react';\n\nimport KeypadContext from '../../contexts/keypadContext';\n\nimport InputKey from '../InputKey/input-key.component';\n\nimport { KeypadContainer } from './keypad.styles';\n\nconst KeyPad = () => {\n  const inputKeys = useContext(KeypadContext);\n\n  const renderInputKeys = () => {\n    return inputKeys.map(data => <InputKey key={data.value} {...data} />);\n  };\n\n  return <KeypadContainer>{renderInputKeys()}</KeypadContainer>;\n};\n\nexport default KeyPad;\n","import styled from 'styled-components';\n\nexport const CalculatorContainer = styled.div`\n  width: 36rem;\n  height: 64rem;\n  border: 2px solid #6fa7c6;\n  background-color: white;\n  border-radius: 20px;\n  padding: 0;\n  -webkit-transform: scale(1);\n  overflow: hidden;\n  background-repeat: no-repeat;\n  padding-bottom: 0.5rem;\n\n  @media only screen and (max-width: 26.55em) {\n    height: 100%;\n    width: 100%;\n    margin-top: 0;\n    border-radius: 0;\n  }\n\n  @media only screen and (max-height: 40em) {\n    height: 100%;\n  }\n\n  // Mobile landscape mode\n  @media screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape) and (hover: none) and (max-height: 40em) {\n    width: 100vw;\n    border-radius: 0;\n  }\n`;\n","import React from 'react';\n\nimport Display from '../Display/display.component';\nimport Keypad from '../Keypad/keypad.component';\n\nimport { CalculatorContainer } from './calculator.styles';\n\nconst Calculator = () => {\n  return (\n    <CalculatorContainer>\n      <Display />\n      <Keypad />\n    </CalculatorContainer>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\n\nimport Calculator from './components/Calculator/calculator.component';\nimport { CalcProvider } from './contexts/CalcContext';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <CalcProvider>\n      <Calculator />\n    </CalcProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}